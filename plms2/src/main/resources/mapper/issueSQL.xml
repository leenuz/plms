<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="issueSQL">
<select id="selectMinwonTotalCount" parameterType="java.util.HashMap" resultType="Integer">
		select count(*) from (
		SELECT *,
		TRIM(CONCAT(mp.mp_sido_nm, ' ', mp.mp_sgg_nm, ' ',mp.mp_emd_nm,' ',mp.mp_ri_nm, ' ', mp.mp_jibun)) AS address
		FROM minwon_master mm
		LEFT JOIN minwon_pnu mp ON mp.mp_minwon_seq=mm.mm_mw_seq
		
		WHERE 1 = 1
		<if test="@org.apache.commons.lang3.ObjectUtils@isNotEmpty(jisa)" >
			and mm.mm_jisa=#{jisa}
		</if>
		<if test="@org.apache.commons.lang3.ObjectUtils@isNotEmpty(status)" >
			and mm.mm_status=#{status}
		</if>
		<if test="@org.apache.commons.lang3.ObjectUtils@isNotEmpty(mw_title)" >
			and mm.mm_mw_title=#{mw_title}
		</if>
		<if test="@org.apache.commons.lang3.ObjectUtils@isNotEmpty(code1)" >
			and mm.mm_mw_code1=#{code1}
		</if>
		<if test="@org.apache.commons.lang3.ObjectUtils@isNotEmpty(code2)" >
			and mm.mm_mw_code2=#{code2}
		</if>
		<if test="@org.apache.commons.lang3.ObjectUtils@isNotEmpty(code3)" >
			and mm.mm_mw_code3=#{code3}
		</if>
		
		<if test="@org.apache.commons.lang3.ObjectUtils@isNotEmpty(start_date) and @org.apache.commons.lang3.ObjectUtils@isNotEmpty(end_date)" >
			and mm.mm_occur_date::date between #{start_date}::date and #{end_date}::date
		</if>
		) r
		where 1=1
		
		<if test="@org.apache.commons.lang3.ObjectUtils@isNotEmpty(address)" >
			and r.address like '%${address}%'
		</if>
		
		
	</select>
	
	
	<!-- 민원관리 목록 조회 -->
	<select id="selectMinwonListOrg"  parameterType="java.util.HashMap" resultType="java.util.HashMap">
   
SELECT *
FROM (
    SELECT ROW_NUMBER() OVER(
               ORDER BY MM.mm_reg_date DESC, MM.mm_mw_seq DESC
           ) AS no,
           MM.mm_mw_seq,
           
           MM.mm_mw_title,
           MM.mm_mw_code1,
           MM.mm_mw_code2,
           MM.mm_mw_code3,
           MM.mm_mw_contents,
           MM.mm_mw_occur_date::date AS mw_occur_date,
           MM.mm_dockey,
           MM.mm_comple_yn,
           MM.mm_comple_date::date as mm_comple_date,
           MM.mm_status,
           MM.mm_reg_date,
           MM.mm_reg_id,
           (SELECT S.code_name FROM plms_issue_code S WHERE MM.mm_mw_code1 = S.code) AS code_str1,
           (SELECT S.code_name FROM plms_issue_code S WHERE MM.mm_mw_code2 = S.code) AS code_str2,
           (SELECT S.code_name FROM plms_issue_code S WHERE MM.mm_mw_code3 = S.code) AS code_str3,
           CASE MM.mm_status 
               WHEN '1' THEN '임시저장'
               WHEN '2' THEN '민원 발생'
               WHEN '3' THEN '대응방안수립'
               WHEN '4' THEN '협의 중'
               WHEN '5' THEN '민원완료'
               ELSE 'Unknown Status'
           END AS status_str,
           MP.mp_sido_nm || ' ' || MP.mp_sgg_nm  || ' ' || MP.mp_emd_nm  || ' ' || COALESCE(MP.mp_ri_nm, '') || ' ' || MP.mp_jibun AS address_str,
           (SELECT COUNT(*) FROM minwon_pnu S WHERE S.mp_minwon_seq = MM.mm_mw_seq) AS pnu_cnt
    FROM minwon_master MM
    LEFT JOIN minwon_pnu MP ON MM.mm_mw_seq = MP.mp_minwon_seq
    WHERE MP.mp_rep_yn = 'Y'
      AND MM.mm_del_flag != 'Y'
		
		<if test="@org.apache.commons.lang3.ObjectUtils@isNotEmpty(mw_title)" >
          
           
            AND (
           MM.mm_mw_title LIKE '%' || '${mw_title}' || '%' 
           OR (MP.mp_sido_nm || ' ' || MP.mp_sgg_nm || ' ' || MP.mp_emd_nm || ' ' || COALESCE(MP.mp_ri_nm, '') || ' ' || MP.mp_jibun) LIKE '%' || '${mw_title}' || '%'
          )
		</if>
		<if test="@org.apache.commons.lang3.ObjectUtils@isNotEmpty(start_date)" >
           AND MM.mm_OCCUR_DATE >= TO_DATE(#{SEARCH_START_DATE}, 'yyyy-MM-dd')
		
		</if>
		<if test="@org.apache.commons.lang3.ObjectUtils@isNotEmpty(end_date)" >
           AND MM.MW_OCCUR_DATE &lt;= TO_DATE(#{end_date}, 'yyyy-MM-dd')
		
		</if>
		<if test="@org.apache.commons.lang3.ObjectUtils@isNotEmpty(code1)" >
           AND MM.mm_MW_CODE1 = #{code1}
		</if>
		<if test="@org.apache.commons.lang3.ObjectUtils@isNotEmpty(code2)" >
           AND MM.mm_MW_CODE2 = #{code2}
		</if>
		<if test="@org.apache.commons.lang3.ObjectUtils@isNotEmpty(code3)" >
           AND MM.mm_MW_CODE3 = #{code3}
		</if>
		<if test="@org.apache.commons.lang3.ObjectUtils@isNotEmpty(jisa)" >
           AND MM.mm_JISA = #{jisa}
		</if>
		<if test="@org.apache.commons.lang3.ObjectUtils@isNotEmpty(status)" >
           AND MM.mm_STATUS = #{status}
		</if>
		
       ) T
 WHERE 1 = 1
	 <if test="@org.apache.commons.lang3.ObjectUtils@isNotEmpty(orderCol)" >
			ORDER BY ${orderCol} ${desc}
		</if>
		<if test="length>0">
			limit #{length} offset #{start}
		</if>
		
	</select>
	
	
	<select id="selectMinwonList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		
		select * from (
		SELECT *,
		TRIM(CONCAT(mp.mp_sido_nm, ' ', mp.mp_sgg_nm, ' ',mp.mp_emd_nm,' ',mp.mp_ri_nm, ' ', mp.mp_jibun)) AS address
		FROM minwon_master mm
		LEFT JOIN minwon_pnu mp ON mp.mp_minwon_seq=mm.mm_mw_seq
		
		WHERE 1 = 1
		<if test="@org.apache.commons.lang3.ObjectUtils@isNotEmpty(jisa)" >
			and mm.mm_jisa=#{jisa}
		</if>
		<if test="@org.apache.commons.lang3.ObjectUtils@isNotEmpty(status)" >
			and mm.mm_status=#{status}
		</if>
		<if test="@org.apache.commons.lang3.ObjectUtils@isNotEmpty(mw_title)" >
			and mm.mm_mw_title=#{mw_title}
		</if>
		<if test="@org.apache.commons.lang3.ObjectUtils@isNotEmpty(code1)" >
			and mm.mm_mw_code1=#{code1}
		</if>
		<if test="@org.apache.commons.lang3.ObjectUtils@isNotEmpty(code2)" >
			and mm.mm_mw_code2=#{code2}
		</if>
		<if test="@org.apache.commons.lang3.ObjectUtils@isNotEmpty(code3)" >
			and mm.mm_mw_code3=#{code3}
		</if>
		
		<if test="@org.apache.commons.lang3.ObjectUtils@isNotEmpty(start_date) and @org.apache.commons.lang3.ObjectUtils@isNotEmpty(end_date)" >
			and mm.mm_occur_date::date between #{start_date}::date and #{end_date}::date
		</if>
		<if test="@org.apache.commons.lang3.ObjectUtils@isNotEmpty(orderCol)" >
			ORDER BY ${orderCol} ${desc}
		</if>
		) r
		where 1=1
		
		<if test="@org.apache.commons.lang3.ObjectUtils@isNotEmpty(address)" >
			and r.address like '%${address}%'
		</if>
		<if test="length>0">
			limit #{length} offset #{start}
		</if>
		
		
		</select>
		
<!-- 민원 테이블 조회 seq 로 조회 -->
		<select id="selectAllMinwonData" parameterType="java.util.HashMap" resultType="java.util.HashMap">
	    SELECT *
	    FROM minwon_master 
	    WHERE 1=1
	    <if test="@org.apache.commons.lang3.ObjectUtils@isNotEmpty(mwSeq)">
	        AND minwon_master.mm_mw_seq = CAST(#{mwSeq} AS NUMERIC)
	    </if>
		</select>


	<select id="selectAllData" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		select *
		,concat(dom_sido_nm,' ',dom_sgg_nm,' ',dom_emd_nm,' ',dom_ri_nm,' ',dom_jibun) as address
		from dopco_master 
		where 1=1
		<if test="@org.apache.commons.lang3.ObjectUtils@isNotEmpty(idx)" >
		and dom_dopco_no=#{idx}
		</if>
		
	</select>
	
	
	<select id="selectcancelTotalCount" parameterType="java.util.HashMap" resultType="Integer">
		select count(*) from (
		SELECT *,
		TRIM(CONCAT(dom.dom_sido_nm, ' ', dom.dom_sgg_nm, ' ',dom.dom_emd_nm,' ',dom.dom_ri_nm, ' ', dom.dom_jibun)) AS address,
		FROM dopco_master dom
		
		WHERE 1 = 1
		
		<if test="@org.apache.commons.lang3.ObjectUtils@isNotEmpty(jisa)" >
			and dom.dom_jisa=#{jisa}
		</if>
		<if test="@org.apache.commons.lang3.ObjectUtils@isNotEmpty(jasan_no)" >
			and dom.dom_jasan_no like '%${jasan_no}%'
		</if>
		<if test="@org.apache.commons.lang3.ObjectUtils@isNotEmpty(cancel_yn)" >
			and dom.dom_cancel_yn =#{cancel_yn}
		</if>
		<if test="@org.apache.commons.lang3.ObjectUtils@isNotEmpty(start_date) and @org.apache.commons.lang3.ObjectUtils@isNotEmpty(end_date)" >
			and dom.dom_chuideuk_date::date between #{start_date}::date and #{end_date}::date
		</if>
		) r
		where 1=1
		
		<if test="@org.apache.commons.lang3.ObjectUtils@isNotEmpty(address)" >
			and r.address like '%${address}%'
		</if>
		
		
	</select>
	<select id="selectDopcoCancelList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		
		select * from (
		SELECT *,
		TRIM(CONCAT(dom.dom_sido_nm, ' ', dom.dom_sgg_nm, ' ',dom.dom_emd_nm,' ',dom.dom_ri_nm, ' ', dom.dom_jibun)) AS address,
		FROM dopco_master dom
		
		WHERE 1 = 1
		dom_cancel_date IS NOT null
		<if test="@org.apache.commons.lang3.ObjectUtils@isNotEmpty(jisa)" >
			and dom.dom_jisa=#{jisa}
		</if>
		<if test="@org.apache.commons.lang3.ObjectUtils@isNotEmpty(jasan_no)" >
			and dom.dom_jasan_no like '%${jasan_no}%'
		</if>
		<if test="@org.apache.commons.lang3.ObjectUtils@isNotEmpty(start_date) and @org.apache.commons.lang3.ObjectUtils@isNotEmpty(end_date)" >
			and dom.dom_chuideuk_date::date between #{start_date}::date and #{end_date}::date
		</if>
		<if test="@org.apache.commons.lang3.ObjectUtils@isNotEmpty(orderCol)" >
			ORDER BY ${orderCol} ${desc}
		</if>
		) r
		where 1=1
		
		<if test="@org.apache.commons.lang3.ObjectUtils@isNotEmpty(address)" >
			and r.address like '%${address}%'
		</if>
		<if test="length>0">
			limit #{length} offset #{start}
		</if>
		
		
		

	</select>
	<select id="selectMinwonDetail_Files" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		SELECT *
		FROM MINWON_ATCFILE
		WHERE MW_SEQ = #{MW_SEQ}
		<if test="@org.apache.commons.lang3.ObjectUtils@isNotEmpty(SEQ)" >
			AND SEQ = #{SEQ}
		</if>
		<if test="@org.apache.commons.lang3.ObjectUtils@isNotEmpty(FILE_SEQ)" >
			AND FILE_SEQ =#{FILE_SEQ}
		</if>
		ORDER BY SEQ DESC
	</select>
	<!-- 민원관리 상세조회 -->
	<select id="selectMinwonDetail" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		SELECT A.mm_mw_seq as MW_SEQ,
		       A.mm_mw_title as MW_TITLE,
		       A.mm_mw_code1 as MW_CODE1,
		       A.mm_mw_code2 as MW_CODE2,
		       A.mm_mw_code3 as MW_CODE3,
		       (SELECT S.CODE_NAME FROM PLMS_ISSUE_CODE S WHERE A.mm_MW_CODE1 = S.CODE) AS CODE_STR1,
		       (SELECT S.CODE_NAME FROM PLMS_ISSUE_CODE S WHERE A.mm_MW_CODE2 = S.CODE) AS CODE_STR2,
		       (SELECT S.CODE_NAME FROM PLMS_ISSUE_CODE S WHERE A.mm_MW_CODE3 = S.CODE) AS CODE_STR3,
		       B.mht_MW_CODE1 AS MW_CODE1_TMP,
		       B.mht_MW_CODE2 AS MW_CODE2_TMP,
		       B.mht_MW_CODE3 AS MW_CODE3_TMP,
		       (SELECT S.CODE_NAME FROM PLMS_ISSUE_CODE S WHERE B.mht_MW_CODE1 = S.CODE) AS CODE_STR1_TMP,
		       (SELECT S.CODE_NAME FROM PLMS_ISSUE_CODE S WHERE B.mht_MW_CODE2 = S.CODE) AS CODE_STR2_TMP,
		       (SELECT S.CODE_NAME FROM PLMS_ISSUE_CODE S WHERE B.mht_MW_CODE3 = S.CODE) AS CODE_STR3_TMP,
		       B.mht_complete_yn AS CODE_APPLY_YN,
		       A.mm_mw_contents as MW_CONTENTS,
		       TO_CHAR(A.mm_mw_OCCUR_DATE, 'YYYY-MM-DD') AS MW_OCCUR_DATE,
		       A.mm_dockey as DOCKEY,
		       PA.pa_STATUS AS APPROVAL_STATUS, 
		       A.mm_comple_yn as COMPLE_YN,
		       A.mm_comple_date as COMPLE_DATE,
		       A.mm_reg_date as REG_DATE,
		       A.mm_reg_id as REG_ID,
		       A.mm_jisa as JISA,
		       A.mm_status as STATUS,
		       CASE A.mm_STATUS
		         WHEN '1' THEN '임시저장'
		         WHEN '2' THEN '민원 발생'
		         WHEN '3' THEN '대응방안수립'
		         WHEN '4' THEN '협의 중'
		         WHEN '5' THEN '민원완료'
		         ELSE 'Unknown Status'
		       END AS STATUS_STR,
		       A.mm_comple_dockey as COMPLE_DOCKEY, 
		       D.pa_STATUS AS COMPLE_STATUS,
		       C.pa_STATUS AS HANDLING_STATUS,
		       C.pa_DOCKEY AS HANDLING_DOCKEY,
		       PA.pa_URL AS ECHO_URL,
		       C.pa_URL AS HANDLE_URL,
		       D.pa_URL AS COMPLE_URL,
		       A.MINWONIN_TOJIJU_NM,	
		       A.MINWONIN_TOJIJU_BIRTH, 
		       A.TOJIJU_RELATION, 
		       A.MINWONIN_PHONE, 
		       A.FIELD_PRESENCE, 
		       A.TOJI_HISTORY, 
		       A.MINWON_REQUIREMENT 
		FROM MINWON_MASTER A
		LEFT JOIN MINWON_HANDLING_TMP B ON A.mm_mw_seq = B.mht_MW_SEQ
		LEFT JOIN PLMS_APPROVAL PA ON A.mm_DOCKEY = PA.pa_DOCKEY
		LEFT JOIN PLMS_APPROVAL C ON B.mht_DOCKEY = C.pa_DOCKEY
		LEFT JOIN PLMS_APPROVAL D ON A.mm_COMPLE_DOCKEY = D.pa_DOCKEY
		WHERE A.mm_MW_SEQ = ${MW_SEQ}
	</select>
	
	<select id="selectMinwonDetailToji" parameterType="java.util.HashMap" resultType="java.util.HashMap">
  
		SELECT A.mp_minwon_seq as MINWON_SEQ,
		       A.mp_pnu as PNU,
		       A.mp_addrcode as ADDRCODE,
		       A.mp_sido_nm as SIDO_NM,
		       A.mp_sgg_nm as SGG_NM,
		       A.mp_emd_nm as EMD_NM,
		       A.mp_ri_nm as RI_NM,
		       A.mp_jibun as JIBUN,
		       A.mp_jibun_full as JIBUN_FULL,
		      TRIM(CONCAT(a.mp_sido_nm,' ',a.mp_sgg_nm,' ',a.mp_emd_nm,' ',a.mp_ri_nm,' ',a.mp_jibun)) AS addr,
		       A.mp_rep_yn as REP_YN,
		       A.mp_registed_yn as REGISTED_YN,
		       A.mp_permitted_yn as PERMITTED_YN,
		       A.mp_toji_type as TOJI_TYPE,
		       A.mp_reg_date as REG_DATE,
		       A.mp_reg_id as REG_ID,
		       TO_CHAR(A.mp_COMP_DATE, 'YYYY-MM-DD') AS COMP_DATE,
		       B.JISANG_STATUS,
		       B.JISANG_NO,
		       B.juso as addr,
		       A.update_yn,
		       A.mp_idx,
		       A.mp_actualarea
		FROM MINWON_PNU A
		LEFT JOIN JIJUK_2024 B ON A.mp_PNU = B.PNU
		WHERE A.mp_MINWON_SEQ = ${MW_SEQ}
		ORDER BY CASE A.mp_REP_YN
		           WHEN 'Y' THEN 0
		           WHEN 'N' THEN 1
		         END ASC

	
	</select>
	
	<select id="selectMinwonDetailAgree" parameterType="java.util.HashMap" resultType="java.util.HashMap">
   
				SELECT DISTINCT ON (A.ma_idx)  
				A.ma_mw_seq as MW_SEQ,
		       A.ma_agree_seq as AGREE_SEQ,
		       CASE 
		           WHEN A.ma_STATUS = '1' THEN '협의 중'
		           WHEN A.ma_STATUS = '2' THEN '소송 중'
		           WHEN A.ma_STATUS = '3' THEN '협의 중단'
		           ELSE 'Unknown'
		       END AS STATUS_STR,
		       A.ma_status as STATUS,
		       A.ma_agree_title as AGREE_TITLE,
		       A.ma_agree_contents as AGREE_CONTENTS,
		       TO_CHAR(A.ma_AGREE_DATE, 'YYYY-MM-DD') AS AGREE_DATE,
		       A.ma_reg_date as REG_DATE,
		       A.ma_reg_id as REG_ID,
		       A.ma_dockey as DOCKEY,
		       B.pa_url as URL,
		       B.pa_status AS APPROVAL_STATUS
		FROM MINWON_AGREEMENT A
		LEFT JOIN PLMS_APPROVAL B ON A.ma_DOCKEY = B.pa_DOCKEY
		WHERE A.ma_MW_SEQ = ${MW_SEQ}
		  AND A.ma_DEL_FLAG != 'Y'
		ORDER BY A.ma_idx,A.ma_AGREE_SEQ DESC
	
	</select>
	
	<!-- 협의 내용 행 클릭 하여 팝업 열기 -->
	<select id="selectMinwonDetailAgreeBySeq" parameterType="java.util.HashMap" resultType="java.util.HashMap">
	    SELECT A.ma_mw_seq AS MW_SEQ,
	           A.ma_agree_seq AS AGREE_SEQ,
	           CASE 
	               WHEN A.ma_STATUS = '1' THEN '협의 중'
	               WHEN A.ma_STATUS = '2' THEN '소송 중'
	               WHEN A.ma_STATUS = '3' THEN '협의 중단'
	               ELSE 'Unknown'
	           END AS STATUS_STR,
	           A.ma_status AS STATUS,
	           A.ma_agree_title AS AGREE_TITLE,
	           A.ma_agree_contents AS AGREE_CONTENTS,
	           TO_CHAR(A.ma_AGREE_DATE, 'YYYY-MM-DD') AS AGREE_DATE,
	           A.ma_reg_date AS REG_DATE,
	           A.ma_reg_id AS REG_ID,
	           A.ma_dockey AS DOCKEY,
	           B.pa_url AS URL,
	           B.pa_status AS APPROVAL_STATUS
	    FROM MINWON_AGREEMENT A
	    LEFT JOIN PLMS_APPROVAL B ON A.ma_DOCKEY = B.pa_DOCKEY
	    WHERE A.ma_MW_SEQ = #{MW_SEQ}::numeric
	      AND A.ma_AGREE_SEQ = #{AGREE_SEQ}::numeric
	      AND A.ma_DEL_FLAG != 'Y'
	</select>
		
	
	<select id="selectMinwonDetailFile" parameterType="java.util.HashMap" resultType="java.util.HashMap">
  
		SELECT A.ma_mw_seq as MW_SEQ,
		       A.ma_file_nm as FILE_NM,
		       A.ma_file_path as FILE_PATH,
		       A.ma_file_seq as FILE_SEQ,
		       A.ma_seq as SEQ,
		       TO_CHAR(A.ma_FILE_REGDATE, 'yyyy-MM-dd') AS FILE_REGDATE
		  FROM MINWON_ATCFILE A
		 WHERE A.ma_MW_SEQ = ${MW_SEQ}
		 ORDER BY A.ma_FILE_REGDATE DESC
	
	</select>
	<!-- 민원관리 토지검색용 PNU검색 -->
	<select id="selectMinwonPNUList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
    
SELECT A.PNU,
       A.JIBUN,
       A.SIDO_NM,
       A.SGG_NM,
       A.EMD_NM,
       A.RI_NM,
       A.GOVER_OWN_YN,
       A.JISANG_STATUS,
       A.JIJUK_AREA,
       A.JIBUN_FULL,
       A.JIMOK_TEXT,
       A.DOSIPLAN,
       A.PIPE_OVERLAP_YN,
       B.jm_permitted_yn as PERMITTED_YN,
       B.jm_comple_yn as COMPLE_YN
--       , COUNT(B.JISANG_NO) AS COMPLE_YN  -- 주석 처리된 부분은 유지
FROM JIJUK_2024 A
LEFT JOIN JISANG_MASTER B ON A.PNU = B.jm_PNU
WHERE 1=1
A.PNU LIKE '$ADDRCODE%'  -- TO_CHAR 제거
  AND A.JIBUN LIKE '$JIBUN%'   -- TO_CHAR 제거
--  AND A.JISANG_STATUS IN ('JISANG', 'NOTSET')  -- 주석 처리된 부분은 유지
GROUP BY A.PNU,
         A.JIBUN,
         A.SIDO_NM,
         A.SGG_NM,
         A.EMD_NM,
         A.RI_NM,
         A.GOVER_OWN_YN,
         A.JISANG_STATUS,
         A.JIJUK_AREA,
         A.JIBUN_FULL,
         A.JIMOK_TEXT,
         A.DOSIPLAN,
         A.PIPE_OVERLAP_YN,
         B.jm_PERMITTED_YN,
         B.jm_COMPLE_YN
ORDER BY A.PNU ASC
	
	</select>
	
	<!-- 민원관리 토지검색용 PNU검색 전자결재 테스트용 -->
	<select id="selectMinwonPNUList1" parameterType="java.util.HashMap" resultType="java.util.HashMap">
    
SELECT A.PNU,
       A.JIBUN,
       A.SIDO_NM,
       A.SGG_NM,
       A.EMD_NM,
       A.RI_NM,
       A.GOVER_OWN_YN,
       A.JISANG_STATUS,
       A.JIJUK_AREA,
       A.JIBUN_FULL,
       A.JIMOK_TEXT,
       A.DOSIPLAN,
       A.PIPE_OVERLAP_YN,
       B.jm_permitted_yn as PERMITTED_YN,
       B.jm_comple_yn as COMPLE_YN,
       B.jm_addrcode as addrcode
--       , COUNT(B.JISANG_NO) AS COMPLE_YN  -- 주석 처리된 부분은 유지
FROM JIJUK_2024 A
LEFT JOIN JISANG_MASTER B ON A.PNU = B.jm_PNU
WHERE 1=1

--  AND A.JISANG_STATUS IN ('JISANG', 'NOTSET')  -- 주석 처리된 부분은 유지
GROUP BY A.PNU,
         A.JIBUN,
         A.SIDO_NM,
         A.SGG_NM,
         A.EMD_NM,
         A.RI_NM,
         A.GOVER_OWN_YN,
         A.JISANG_STATUS,
         A.JIJUK_AREA,
         A.JIBUN_FULL,
         A.JIMOK_TEXT,
         A.DOSIPLAN,
         A.PIPE_OVERLAP_YN,
         B.jm_PERMITTED_YN,
         B.jm_COMPLE_YN,
         B.jm_addrcode
ORDER BY A.PNU ASC LIMIT 1
	
	</select>
	<select id="makeMinwonMasterKey" resultType="Integer" parameterType="HashMap">
   
		SELECT coalesce(MAX(S.mm_MW_SEQ), 0) + 1 AS MW_KEY FROM MINWON_MASTER S 
	
	</select>
	<insert id="insertMinwonMaster" parameterType="HashMap">
		INSERT INTO MINWON_MASTER (
		        mm_MW_SEQ,
		        mm_MW_TITLE,
		        mm_mw_CONTENTS,
		        mm_mw_OCCUR_DATE,
		        mm_JISA,
		        mm_REG_DATE,
		        mm_REG_ID,
		        mm_STATUS
		       
		       , minwonin_tojiju_nm
		       , minwonin_tojiju_birth
		       , tojiju_relation
		       , minwonin_phone
		       , field_presence
		       , toji_history
		       , minwon_requirement
		       , minwon_content
		) VALUES (
		        #{MW_SEQ},
		        #{MW_TITLE},
		        #{MINWON_CONTENT},
		        TO_DATE(#{MW_OCCUR_DATE}, 'yyyy-MM-dd'),
		        #{JISA},
		        CURRENT_TIMESTAMP,
		        #{REG_ID},
		        #{STATUS}
		        
		        , #{MINWONIN_TOJIJU_NM}
		        , #{MINWONIN_TOJIJU_BIRTH}
		        , #{TOJIJU_RELATION}
		        , #{MINWONIN_PHONE}
		        , #{FIELD_PRESENCE}
		        , #{TOJI_HISTORY}
		        , #{MINWON_REQUIREMENT}
		        , #{MINWON_CONTENT}
		        )
	</insert>
	<update id="updateMinwonMaster" parameterType="HashMap">
UPDATE MINWON_MASTER
   SET mm_MW_TITLE = #{MW_TITLE}
     , mm_mw_OCCUR_DATE = TO_DATE(#{MW_OCCUR_DATE}, 'yyyy-MM-dd')
     , mm_MW_CONTENTS = #{MW_CONTENTS}
     , mm_JISA = #{JISA}
 WHERE mm_MW_SEQ = ${MW_SEQ}
	</update>
	
		<delete id="deleteMinwonFile" parameterType="HashMap"> 
DELETE FROM MINWON_ATCFILE
 WHERE ma_MW_SEQ = #{MW_SEQ}
   AND ma_SEQ = #{SEQ}
</delete>
<delete id="deleteMinwonPnu" parameterType="HashMap"> 
DELETE FROM MINWON_PNU
 WHERE mp_MINWON_SEQ = #{MW_SEQ}
</delete>

<insert id="insertMinwonPnu" parameterType="HashMap">
  
INSERT INTO MINWON_PNU (
        mp_MINWON_SEQ,
        mp_PNU,
        mp_ADDRCODE,
        mp_SIDO_NM,
        mp_SGG_NM,
        mp_EMD_NM,
        mp_RI_NM,
        mp_JIBUN,
        mp_JIBUN_FULL,
        mp_REP_YN,
        mp_REGISTED_YN,
        mp_PERMITTED_YN,
        mp_TOJI_TYPE,
        mp_ACTUALAREA,
        mp_REG_DATE,
        mp_REG_ID
) VALUES (
        #{MINWON_SEQ},
        #{PNU},
        #{ADDRCODE},
        #{SIDO_NM},
        #{SGG_NM},
        #{EMD_NM},
        #{RI_NM},
        #{JIBUN},
        #{JIBUN_FULL},
        #{REP_YN},
        #{REGISTED_YN},
        #{PERMITTED_YN},
        #{TOJI_TYPE},
        #{AREA},
        CURRENT_TIMESTAMP,
        #{REG_ID}
)

	</insert>
	
	<update id="updateNinwonEchoNo" parameterType="HashMap">
UPDATE MINWON_MASTER
   SET mm_DOCKEY = #{DOCKEY}
     , mm_SANGSIN_YN = 'Y'
 WHERE mm_MW_SEQ = ${MW_SEQ}
</update>

<select id="selectMinwonDocInfo" resultType="HashMap" parameterType="HashMap">
		SELECT * FROM PLMS_APPROVAL WHERE pa_DOCKEY IN (SELECT mm_DOCKEY FROM MINWON_MASTER WHERE mm_MW_SEQ = ${MW_SEQ}) AND (pa_STATUS IS NULL OR pa_STATUS NOT IN ('X'))
	</select>
<select id="selectMinwonHandlingTmp" resultType="HashMap" parameterType="HashMap">
SELECT mht_mw_seq as MW_SEQ,
       mht_mw_code1 as MW_CODE1,
       mht_mw_code2 as MW_CODE2,
       mht_mw_code3 as MW_CODE3,
       mht_complete_yn as COMPLETE_YN,
       mht_dockey as DOCKEY
  FROM MINWON_HANDLING_TMP
 WHERE mht_MW_SEQ = ${MW_SEQ}
</select>
	
	
		<!-- 민원관리 대응방안 임시저장 -->
	<insert id="insertMinwonHandling" parameterType="HashMap">
INSERT INTO MINWON_HANDLING_TMP (
        mht_MW_SEQ,
        mht_MW_CODE1,
        mht_MW_CODE1_NAME,
        mht_MW_CODE2,
        mht_MW_CODE2_NAME,
        mht_MW_CODE3,
        mht_MW_CODE3_NAME,
        mht_complete_yn
) VALUES (
        ${MW_SEQ},
        #{MW_CODE1},
        #{MW_CODE1_NAME},
        #{MW_CODE2},
        #{MW_CODE2_NAME},
        #{MW_CODE3},
        #{MW_CODE3_NAME},
        #{COMPLETE_YN}
)
	</insert>
	<update id="updateMinwonHandlingTmpEchoNo" parameterType="HashMap">
UPDATE MINWON_HANDLING_TMP
   SET mht_DOCKEY = #{DOCKEY}
 WHERE mht_MW_SEQ = ${MW_SEQ}
	</update>
		<select id="selectMinwonHandlingDocInfo" resultType="HashMap" parameterType="HashMap">
		SELECT * FROM PLMS_APPROVAL WHERE pa_DOCKEY IN (SELECT mht_DOCKEY FROM MINWON_HANDLING_TMP WHERE mht_MW_SEQ = ${MW_SEQ}) AND (pa_STATUS IS NULL OR pa_STATUS NOT IN ('X'))
	</select>
	
		<!-- 민원협의 관련 -->
	<select id="makeMinwonAgreeKey" resultType="integer" parameterType="HashMap">
   
SELECT COALESCE(MAX(ma_AGREE_SEQ), 0) + 1 AS AGREE_SEQ
  FROM MINWON_AGREEMENT
 WHERE ma_MW_SEQ = ${MW_SEQ}

	</select>
		
	<insert id="insertMinwonAgree" parameterType="HashMap"> 
INSERT INTO MINWON_AGREEMENT (
        ma_MW_SEQ,
        ma_AGREE_SEQ,
        ma_AGREE_TITLE,
        ma_AGREE_CONTENTS,
        ma_AGREE_DATE,
        ma_REG_DATE,
        ma_REG_ID,
        ma_STATUS,
        ma_DOCKEY,
        ma_DEL_FLAG
) VALUES (
        ${MW_SEQ},
        ${AGREE_SEQ},
        #{AGREE_TITLE},
        #{AGREE_CONTENTS},
        TO_DATE(#{AGREE_DATE}, 'yyyy-MM-dd'),
        CURRENT_TIMESTAMP,
        #{REG_ID},
        #{STATUS},
        #{DOCKEY},
        'N'
)
	</insert>
	
	<update id="updateMinwonAgree" parameterType="HashMap"> 
UPDATE MINWON_AGREEMENT
   SET ma_AGREE_TITLE = #{AGREE_TITLE},
       ma_AGREE_CONTENTS = #{AGREE_CONTENTS},
       ma_AGREE_DATE = TO_DATE(#{AGREE_DATE}, 'yyyy-MM-dd'),
       ma_STATUS = #{STATUS}
 WHERE ma_MW_SEQ = ${MW_SEQ}
   AND ma_AGREE_SEQ = ${AGREE_SEQ}
</update>
<update id="updateMinwonMasterStatus" parameterType="HashMap">
UPDATE MINWON_MASTER
   SET mm_STATUS = ${STATUS}
 WHERE mm_MW_SEQ = ${MW_SEQ}
	</update>
	
	<update id="updateMinwonAgreeFileKey" parameterType="HashMap">
   
UPDATE MINWON_AGREE_ATCFILE
   SET maa_MW_SEQ = ${MW_SEQ}
     , maa_AGREE_SEQ = ${AGREE_SEQ}
 WHERE maa_SEQ =${FILESEQ}
	
	</update>
	<select id="selectMinwonAgreeData" resultType="HashMap" parameterType="HashMap">
SELECT MA.ma_mw_seq as MW_SEQ,
       MA.ma_agree_seq as AGREE_SEQ,
       MA.ma_agree_title as AGREE_TITLE,
       MA.ma_agree_contents as AGREE_CONTENTS,
       TO_CHAR(MA.ma_AGREE_DATE, 'yyyy-MM-dd') AS AGREE_DATE,
       TO_CHAR(MA.ma_REG_DATE, 'yyyy-MM-dd') AS REG_DATE,
       MA.ma_reg_id as REG_ID,
       MA.ma_status as STATUS,
       CASE 
           WHEN MA.ma_STATUS = '1' THEN '협의 중'
           WHEN MA.ma_STATUS = '2' THEN '소송 중'
           WHEN MA.ma_STATUS = '3' THEN '협의 중단'
           ELSE '알 수 없음'
       END AS STATUS_STR,
       MA.ma_dockey as DOCKEY,
       PA.pa_STATUS AS APPROVAL_STATUS,
       PA.pa_url as URL
  FROM MINWON_AGREEMENT MA
  LEFT JOIN PLMS_APPROVAL PA ON MA.ma_DOCKEY = PA.pa_DOCKEY
 WHERE MA.ma_MW_SEQ = ${MW_SEQ}  
   AND MA.ma_AGREE_SEQ = ${AGREE_SEQ}
   AND MA.ma_DEL_FLAG != 'Y'
</select>
	<select id="selectMinwonAgreeDetailFile" resultType="HashMap" parameterType="HashMap">
SELECT maa_mw_seq as MW_SEQ,
       maa_agree_seq as AGREE_SEQ,
       maa_file_nm as FILE_NM,
       maa_file_path as FILE_PATH,
       maa_seq as SEQ,
       maa_file_seq as FILE_SEQ,
       TO_CHAR(maa_FILE_REGDATE, 'yyyy-MM-dd') AS FILE_REGDATE
  FROM MINWON_AGREE_ATCFILE
 WHERE maa_MW_SEQ = ${MW_SEQ}
   AND maa_AGREE_SEQ = ${AGREE_SEQ}
</select>
	
	
	
<update id="updateMinwonAgreeEchoNo" parameterType="HashMap"> 
UPDATE MINWON_AGREEMENT
   SET ma_DOCKEY = #{DOCKEY}
 WHERE ma_MW_SEQ = ${MW_SEQ}
   AND ma_AGREE_SEQ = ${AGREE_SEQ}
</update>	
	<select id="selectMinwonAgreeDocInfo" resultType="HashMap" parameterType="HashMap">
		SELECT * FROM PLMS_APPROVAL WHERE pa_DOCKEY IN (SELECT ma_DOCKEY FROM MINWON_AGREEMENT WHERE ma_MW_SEQ = ${MW_SEQ} AND ma_AGREE_SEQ = ${AGREE_SEQ} ) AND (pa_STATUS IS NULL OR pa_STATUS NOT IN ('X'))
	</select>
	
	
		<!-- 민원 완료처리 전 협의내용 상태 체크 -->
	<select id="selectMinwonCompleteBeforeCheck" resultType="integer" parameterType="HashMap">
SELECT COUNT(*) AS TOTALCNT
  FROM MINWON_AGREEMENT A
 WHERE A.ma_MW_SEQ = ${MW_SEQ}
   AND A.ma_DEL_FLAG !='Y'
   AND A.ma_DOCKEY IS NULL
	</select>
		<!-- 민원 완료 전자결재 정보키 업데이트 -->
	<update id="updateMinwonMasterCompleteEchoNo" parameterType="HashMap">
UPDATE MINWON_MASTER
   SET mm_comple_dockey = #{DOCKEY}
 WHERE mm_MW_SEQ = ${MW_SEQ}
</update>
	<select id="selectMinwonCompleteDocInfo" resultType="HashMap" parameterType="HashMap">
		SELECT * FROM PLMS_APPROVAL WHERE pa_DOCKEY IN (SELECT mm_COMPLE_DOCKEY FROM MINWON_MASTER WHERE mm_MW_SEQ = ${MW_SEQ}  ) AND (pa_STATUS IS NULL OR pa_STATUS NOT IN ('X'))
	</select>
	
	<update id="cancelNinwonEchoNo" parameterType="HashMap">
UPDATE MINWON_MASTER
   SET mm_DOCKEY = ''
     , mm_SANGSIN_YN = 'N'
 WHERE mm_MW_SEQ = #{MW_SEQ}
</update>
	<update id="deleteMinwonMaster" parameterType="HashMap">
UPDATE MINWON_MASTER
   SET mm_DEL_FLAG = 'Y'
     , mm_DEL_DATE = Now()
 WHERE mm_MW_SEQ = #{MW_SEQ}
	</update>
	<update id="deleteMinwonAgree" parameterType="HashMap"> 
UPDATE MINWON_AGREEMENT
   SET ma_DEL_FLAG = 'Y'
     , ma_DEL_DATE = Now()
 WHERE ma_MW_SEQ = #{MW_SEQ}
   AND ma_AGREE_SEQ = #{AGREE_SEQ}
	</update>
	<select id="selectTogiMgtJisangSearch" resultType="HashMap" parameterType="HashMap">
		SELECT 
		    JOIN_MST.JISANG_STATUS,
		    JOIN_MST.COMPLE_YN,
		    COUNT(*) AS CNT
		FROM (
		    SELECT 
		        JM.jm_JISANG_NO AS MASTER_NO,
		        'JISANG' AS JISANG_STATUS,
		        JM.jm_JISA AS JISA,
		        JM.jm_SIDO_NM AS SIDO_NM,
		        JM.jm_sgg_nm AS SGG_NM,
		        JM.jm_emd_nm AS EMD_NM,
		        JM.jm_ri_nm AS RI_NM,
		        JM.jm_jibun AS JIBUN,
		        JM.jm_pnu AS PNU,
		        JM.jm_addrcode AS ADDRCODE,
		        JM.jm_jasan_no AS JASAN_NO,
		        TO_CHAR(JM.jm_CHUIDEUK_DATE, 'YYYY-MM-DD') AS CHUIDEUK_DATE,
		        JM.jm_chuideuk_money AS CHUIDEUK_MONEY,
		        JM.jm_jasan_money AS JASAN_MONEY,
		        NULL AS PMT_NO,
		        NULL AS PAY_MONEY,
		        NULL AS PAY_DATE,
		        NULL AS PMT_ST_DATE,
		        NULL AS PMT_ED_DATE,
		        NULL AS GOVER_LENGTH,
		        NULL AS GOVER_AREA,
		        NULL AS PIPE_METER,
		        NULL AS PIPE_METER2,
		        JS.SOUJA_NAME AS SOUJA_NAME,
		        (
		            SELECT COUNT(js_JISANG_NO) - 1
		            FROM JISANG_SOUJA
		            WHERE js_jisang_no = JM.jm_jisang_no
		        ) AS SOUJA_CNT,
		        JM.jm_gover_own_yn AS GOVER_OWN_YN,
		        COALESCE(JM.jm_COMPLE_YN, 'N') AS COMPLE_YN
		    FROM JISANG_MASTER JM
		    LEFT JOIN (
		        SELECT 
		            js_jisang_no AS JISANG_NO,
		            js_souja_name AS SOUJA_NAME,
		            ROW_NUMBER() OVER (PARTITION BY js_jisang_no ORDER BY js_jisang_no ASC) AS ROW_IDX
		        FROM JISANG_SOUJA
		        GROUP BY js_jisang_no, js_souja_name
		    ) JS ON JM.jm_jisang_no = JS.JISANG_NO
		    WHERE (JM.jm_cancle_yn IS NULL OR JM.jm_cancle_yn != 'Y')
		    
		    UNION ALL
		    
		    SELECT 
		        GP.gp_GOVER_NO AS MASTER_NO,
		        'GOVER' AS JISANG_STATUS,
		        (SELECT S.gm_JISA FROM GOVER_MASTER S WHERE S.gm_GOVER_NO = GP.gp_GOVER_NO) AS JISA,
		        GP.gp_sido_nm as SIDO_NM,
		        GP.gp_sgg_nm as SGG_NM,
		        GP.gp_emd_nm as EMD_NM,
		        GP.gp_ri_nm as RI_NM,
		        GP.gp_jibun as JIBUN,
		        GP.gp_pnu as PNU,
		        GP.gp_addrcode as ADDRCODE,
		        NULL AS JASAN_NO,
		        NULL AS CHUIDEUK_DATE,
		        NULL AS CHUIDEUK_MONEY,
		        NULL AS JASAN_MONEY,
		        GPE.gp_pmt_no as PMT_NO,
		        GPE.gp_pay_money as PAY_MONEY,
		        TO_CHAR(GPE.gp_PAY_DATE, 'YYYY-MM-DD') AS PAY_DATE,
		        TO_CHAR(GM.gm_GOVER_ST_DATE, 'YYYY-MM-DD') AS PMT_ST_DATE,
		        TO_CHAR(GM.gm_GOVER_ED_DATE, 'YYYY-MM-DD') AS PMT_ED_DATE,
		        GP.gp_gover_length as GOVER_LENGTH,
		        GP.gp_gover_area as GOVER_AREA,
		        (SELECT S.gm_PIPE_METER FROM GOVER_MASTER S WHERE S.gm_GOVER_NO = GP.gp_GOVER_NO) AS PIPE_METER,
		        (SELECT S.gm_PIPE_METER2 FROM GOVER_MASTER S WHERE S.gm_GOVER_NO = GP.gp_GOVER_NO) AS PIPE_METER2,
		        NULL AS SOUJA_NAME,
		        0 AS SOUJA_CNT,
		        GP.gp_gover_own_yn as GOVER_OWN_YN,
		        'N' AS COMPLE_YN
		    FROM GOVER_PNU GP
		    LEFT JOIN (
		        SELECT S.gp_GOVER_NO, S.gp_PAY_MONEY, S.gp_PAY_VAT, S.gp_PAY_DATE, S.gp_PAY_WAY, S.gp_PMT_NO, S.gp_PMT_ST_DATE, S.gp_PMT_ED_DATE
		        FROM GOVER_PERMIT S
		        JOIN (
		            SELECT MAX(SS.gp_SEQ) AS SEQ, SS.gp_GOVER_NO
		            FROM GOVER_PERMIT SS
		            WHERE SS.gp_PMT_NO IS NOT NULL
		            AND SS.gp_DOCKEY IN (SELECT SSS.pa_DOCKEY FROM PLMS_APPROVAL SSS WHERE SSS.pa_STATUS IS NOT NULL AND SSS.pa_STATUS != 'X')
		            GROUP BY SS.gp_GOVER_NO
		        ) SS ON S.gp_SEQ = SS.SEQ AND S.gp_GOVER_NO = SS.gp_GOVER_NO
		    ) GPE ON GP.gp_GOVER_NO = GPE.gp_GOVER_NO
		    LEFT JOIN GOVER_MASTER GM ON GP.gp_GOVER_NO = GM.gm_GOVER_NO
		    WHERE GM.gm_SAVE_STATUS = 'A' AND GM.gm_CANCLE_YN IS NULL
		    
		    UNION ALL
		    
		     SELECT 
		        NM.nm_NOTSET_NO AS MASTER_NO,
		        'NOTSET' AS JISANG_STATUS,
		        NM.nm_jisa as JISA,
		        NM.nm_sido_nm as SIDO_NM,
		        NM.nm_sgg_nm as SGG_NM,
		        NM.nm_emd_nm as EMD_NM,
		        NM.nm_ri_nm as RI_NM,
		        NM.nm_jibun as JIBUN,
		        NM.nm_pnu as PNU,
		        NM.nm_addrcode as ADDRCODE,
		        NULL AS JASAN_NO,
		        NULL AS CHUIDEUK_DATE,
		        NULL AS CHUIDEUK_MONEY,
		        NULL AS JASAN_MONEY,
		        NULL AS PMT_NO,
		        NULL AS PAY_MONEY,
		        NULL AS PAY_DATE,
		        NULL AS PMT_ST_DATE,
		        NULL AS PMT_ED_DATE,
		        NULL AS GOVER_LENGTH,
		        NULL AS GOVER_AREA,
		        NULL AS PIPE_METER,
		        NULL AS PIPE_METER2,
		        NS.ns_souja_name as SOUJA_NAME,
		        (SELECT COUNT(ns_NOTSET_NO) - 1 FROM NOTSET_SOUJA WHERE ns_NOTSET_NO = NM.nm_NOTSET_NO) AS SOUJA_CNT,
		        NM.nm_gover_own_yn as GOVER_OWN_YN,
		        'N' AS COMPLE_YN
		    FROM NOTSET_MASTER NM
		    LEFT JOIN (
		        SELECT ns_notset_no , ns_souja_name , ROW_NUMBER() OVER (PARTITION BY ns_NOTSET_NO ORDER BY ns_NOTSET_NO ASC) AS ROW_IDX
		        FROM NOTSET_SOUJA
		        GROUP BY ns_NOTSET_NO, ns_SOUJA_NAME
		    ) NS ON NM.nm_NOTSET_NO = NS.ns_NOTSET_NO
		    WHERE NM.nm_DEL_FLAG = 'N'
		) JOIN_MST
 		WHERE COALESCE(JOIN_MST.GOVER_OWN_YN, 'N') = 'N'
		<if test="@org.apache.commons.lang3.ObjectUtils@isNotEmpty(JISA)" >
   			AND JOIN_MST.${KIJUN} = #{JISA}
		</if>
		<if test="@org.apache.commons.lang3.ObjectUtils@isNotEmpty(ADDRCODE)" >
   		AND SUBSTR( JOIN_MST.PNU, 0, 5) like '${ADDRCODE}%'
		</if>
 GROUP BY JOIN_MST.JISANG_STATUS, JOIN_MST.COMPLE_YN
	</select>
	
	
	<select id="selectIssueCodeList" resultType="HashMap" parameterType="HashMap">
     
SELECT TTT.*
FROM (
    SELECT TT.DEPTH1_CODE,
           T2.CODE AS DEPTH2_CODE,
           TT.DEPTH3_CODE,
           TT.DEPTH1_NAME,
           T2.CODE_NAME AS DEPTH2_NAME,
           TT.DEPTH3_NAME,
           COALESCE(TT.REGISTED_YN, T2.REGISTED_YN) AS REGISTED_YN,
           COALESCE(TT.PERMITTED_YN, T2.PERMITTED_YN) AS PERMITTED_YN,
           COALESCE(TT.CASE_TEXT, T2.CASE_TEXT) AS CASE_TEXT,
           COALESCE(TT.ETC_TEXT, T2.ETC_TEXT) AS ETC_TEXT,
           T2.CODE_GROUP_1,
           T2.CODE_GROUP_2,
           T2.CODE_DEPTH
    FROM (
        SELECT T1.CODE AS DEPTH1_CODE,
               T3.CODE AS DEPTH3_CODE,
               T1.CODE_NAME AS DEPTH1_NAME,
               T3.CODE_NAME AS DEPTH3_NAME,
               T1.DEPTH1,
               T3.DEPTH2,
               COALESCE(T1.CASE_TEXT, T3.CASE_TEXT) AS CASE_TEXT,
               COALESCE(T1.ETC_TEXT, T3.ETC_TEXT) AS ETC_TEXT,
               COALESCE(T1.REGISTED_YN, T3.REGISTED_YN) AS REGISTED_YN,
               COALESCE(T1.PERMITTED_YN, T3.PERMITTED_YN) AS PERMITTED_YN
        FROM (
            SELECT A.CODE,
                   A.CODE_DEPTH,
                   A.CODE_NAME,
                   A.REGISTED_YN,
                   A.PERMITTED_YN,
                   A.CASE_TEXT,
                   A.ETC_TEXT,
                   SUBSTRING(A.CODE FROM 1 FOR 4) AS DEPTH1,
                   SUBSTRING(A.CODE FROM 1 FOR 6) AS DEPTH2
            FROM PLMS_ISSUE_CODE A
            WHERE A.CODE_DEPTH = 1
        ) T1
        LEFT JOIN (
            SELECT A.CODE,
                   A.CODE_DEPTH,
                   A.CODE_NAME,
                   A.REGISTED_YN,
                   A.PERMITTED_YN,
                   A.CASE_TEXT,
                   A.ETC_TEXT,
                   SUBSTRING(A.CODE FROM 1 FOR 4) AS DEPTH1,
                   SUBSTRING(A.CODE FROM 1 FOR 6) AS DEPTH2
            FROM PLMS_ISSUE_CODE A
            WHERE A.CODE_DEPTH = 3
        ) T3
        ON T1.DEPTH1 = T3.DEPTH1
    ) TT
    LEFT JOIN (
        SELECT A.CODE,
               A.CODE_DEPTH,
               A.CODE_NAME,
               A.REGISTED_YN,
               A.PERMITTED_YN,
               A.CASE_TEXT,
               A.ETC_TEXT,
               SUBSTRING(A.CODE FROM 1 FOR 4) AS DEPTH1,
               SUBSTRING(A.CODE FROM 1 FOR 6) AS DEPTH2,
               A.CODE_GROUP_1,
               A.CODE_GROUP_2
        FROM PLMS_ISSUE_CODE A
        WHERE A.CODE_DEPTH = 2
    ) T2
    ON (TT.DEPTH2 IS NOT NULL AND TT.DEPTH2 = T2.DEPTH2)
    OR (TT.DEPTH2 IS NULL AND TT.DEPTH1 = T2.DEPTH1)
) TTT
WHERE 1 = 1

     
		<if test="@org.apache.commons.lang3.ObjectUtils@isNotEmpty(TYPE)" >
			AND SUBSTR(TTT.DEPTH1_CODE, 1, 2) = #{TYPE}
		</if>
		<if test="@org.apache.commons.lang3.ObjectUtils@isNotEmpty(REGISTED_YN)" >
			AND TTT.REGISTED_YN = #{REGISTED_YN}
		</if>
		<if test="@org.apache.commons.lang3.ObjectUtils@isNotEmpty(PERMITTED_YN)" >
			AND TTT.PERMITTED_YN = #{PERMITTED_YN}
		</if>
		<if test="@org.apache.commons.lang3.ObjectUtils@isNotEmpty(DEPTH1)" >
			AND TTT.DEPTH1_CODE = #{DEPTH1}
		</if>
		<if test="@org.apache.commons.lang3.ObjectUtils@isNotEmpty(DEPTH2)" >
			AND TTT.DEPTH2_CODE = #{DEPTH2}
		</if>
		<if test="@org.apache.commons.lang3.ObjectUtils@isNotEmpty(DEPTH3)" >
			AND TTT.DEPTH3_CODE = #{DEPTH3}
		</if>
     
 ORDER BY SUBSTR(TTT.DEPTH1_CODE, 1, 1) ASC
          , TTT.REGISTED_YN DESC
          , TTT.PERMITTED_YN DESC
          , SUBSTR(TTT.DEPTH1_CODE, 3, 2) ASC
          , DEPTH1_CODE ASC
          , DEPTH2_CODE ASC
          , DEPTH3_CODE ASC
   
	</select>
	<select id="selectIssueCodeListDepth" resultType="HashMap" parameterType="HashMap">
      
SELECT A.CODE,
       A.CODE_DEPTH,
       A.CODE_NAME,
       A.REGISTED_YN,
       A.PERMITTED_YN,
       A.CASE_TEXT,
       A.ETC_TEXT,
       (SELECT COUNT(*) FROM PLMS_ISSUE_CODE S WHERE SUBSTR(S.CODE, 1, 4) = SUBSTR(A.CODE, 1, 4) AND S.CODE_DEPTH = 2) AS SUB_1_CNT,
       (SELECT COUNT(*) FROM PLMS_ISSUE_CODE S WHERE SUBSTR(S.CODE, 1, 6) = SUBSTR(A.CODE, 1, 6) AND S.CODE_DEPTH = 3) AS SUB_2_CNT
  FROM PLMS_ISSUE_CODE A
 WHERE A.CODE_DEPTH = #{CODE_DEPTH}::numeric
      
		<if test="@org.apache.commons.lang3.ObjectUtils@isNotEmpty(DEPTH1)" >
			AND SUBSTR(A.CODE, 1, 4) = SUBSTR(#{DEPTH1}, 1, 4)
		</if>
		<if test="@org.apache.commons.lang3.ObjectUtils@isNotEmpty(DEPTH2)" >
			AND SUBSTR(A.CODE, 1, 6) = SUBSTR(#{DEPTH2}, 1, 6)
		</if>
		<if test="@org.apache.commons.lang3.ObjectUtils@isNotEmpty(REGISTED_YN)" >
			AND A.REGISTED_YN = #{REGISTED_YN}
		</if>
		<if test="@org.apache.commons.lang3.ObjectUtils@isNotEmpty(PERMITTED_YN)" >
			AND A.PERMITTED_YN = #{PERMITTED_YN}
		</if>
		<if test="@org.apache.commons.lang3.ObjectUtils@isNotEmpty(IS_CODE_ADMIN)" >
			AND SUBSTR(A.CODE, 1, 2) = #{IS_CODE_ADMIN}
		</if>
 ORDER BY SUBSTR(A.CODE , 1, 1) ASC
          , A.REGISTED_YN DESC
          , A.PERMITTED_YN DESC
          , A.CODE ASC
	</select>
	
	<select id="selectIssueCodeDetail" resultType="HashMap" parameterType="HashMap">
   
	SELECT A.CODE
	       , A.CODE_DEPTH
	       , (
	        SELECT S.CODE_NAME
	          FROM PLMS_ISSUE_CODE S
	         WHERE S.CODE = CONCAT(SUBSTR(A.CODE, 1, 4), '0000')
	) AS DEPTH1_NAME
	       , (
	        SELECT S.CODE_NAME
	          FROM PLMS_ISSUE_CODE S
	         WHERE S.CODE = CONCAT(SUBSTR(A.CODE, 1, 6), '00')
	) AS DEPTH2_NAME
	       , A.CODE_NAME
	       , A.REGISTED_YN
	       , A.PERMITTED_YN
	       , A.CASE_TEXT
	       , A.ETC_TEXT
	  FROM PLMS_ISSUE_CODE A
	 WHERE A.CODE = #{CODE}
	    
	</select>
	
	<select id="selectIssueCodeManualList" resultType="HashMap" parameterType="HashMap">
      
SELECT A.CODE
       , A.FILE_NM
       , A.FILE_PATH
       , A.SEQ
       , A.FILE_SEQ
       , A.FILE_VERSION
       , A.FILE_REGDATE
       , A.MANUAL_TITLE
  FROM (
        SELECT S.CODE
               , MAX(TO_NUMBER(S.FILE_VERSION) * 10) / 10  AS FILE_VERSION
               , S.MANUAL_TITLE
          FROM PLMS_ISSUE_CODE_ATC_FILE S
         WHERE S.CODE = #{CODE}
         GROUP BY S.CODE
                  , S.MANUAL_TITLE
) T
       , PLMS_ISSUE_CODE_ATC_FILE A
 WHERE A.CODE = T.CODE
   AND A.FILE_VERSION  = T.FILE_VERSION
   AND A.MANUAL_TITLE  = T.MANUAL_TITLE
 ORDER BY A.SEQ DESC
     
	</select>
	<update id="updateIssueCodeText" parameterType="HashMap">
   
UPDATE PLMS_ISSUE_CODE
   SET CASE_TEXT = #{CASE_TEXT}
     , ETC_TEXT = #{ETC_TEXT}
 WHERE CODE = #{CODE}
      
	</update>
	<update id="updateSeqFileIssue" parameterType="HashMap">  
		         
			UPDATE PLMS_ISSUE_CODE_ATC_FILE SET
				 CODE = #{CODE}
				 , FILE_VERSION = #{FILE_VERSION}
				 , MANUAL_TITLE = #{MANUAL_TITLE}
			WHERE SEQ = #{FILESEQ}
		
	</update>
	<select id="selectIssueManualFileVersionList" resultType="HashMap" parameterType="HashMap">
		
SELECT CODE
       , FILE_NM
       , FILE_PATH
       , SEQ
       , FILE_SEQ
       , FILE_VERSION
       , FILE_REGDATE
       , MANUAL_TITLE
  FROM PLMS_ISSUE_CODE_ATC_FILE
 WHERE CODE = #{CODE}
   AND MANUAL_TITLE = #{MANUAL_TITLE}
 ORDER BY FILE_VERSION DESC
	
	</select>
	<delete id="deleteIssueManualBySeq" parameterType="HashMap">
		 
DELETE FROM PLMS_ISSUE_CODE_ATC_FILE
 WHERE FILE_SEQ = #{FILE_SEQ}
   AND SEQ = #{SEQ}
   AND CODE = #{CODE}
		
	</delete>

	<delete id="deleteIssueManualByTitle" parameterType="HashMap">
		 
DELETE FROM PLMS_ISSUE_CODE_ATC_FILE
 WHERE CODE = #{CODE}
   AND MANUAL_TITLE = #{MANUAL_TITLE}
		

	</delete>
		<delete id="deleteIssueCode" parameterType="HashMap">
	
DELETE PLMS_ISSUE_CODE
 WHERE CODE = #{CODE}
	
	</delete>
	<select id="makeIssueNextCodeDepth1" resultType="String" parameterType="HashMap">
	SELECT 
    RPAD(#{CODE} || 
         LPAD((COALESCE(MAX(CAST(SUBSTRING(T.CODE, 3, 2) AS INTEGER)), 0) + 1)::TEXT, 2, '0'), 
    8, '0') AS CODE
FROM PLMS_ISSUE_CODE T
WHERE T.CODE LIKE '${CODE}%'
  AND T.CODE_DEPTH = 1
  

	
	</select>
	<select id="makeIssueNextCodeDepth2"  resultType="String" parameterType="HashMap">
	 SELECT RPAD(#{CODE} || 
       LPAD((COALESCE(MAX(CAST(SUBSTRING(CODE, 5, 2) AS INTEGER)), 0) + 1)::text, 2, '0')
       , 8, '0') AS CODE
  FROM PLMS_ISSUE_CODE T
 WHERE T.CODE LIKE '${CODE}%'
   AND CODE_DEPTH = 2

	
	</select>

	<select id="makeIssueNextCodeDepth3"  resultType="String" parameterType="HashMap">
	 SELECT 
    RPAD(#{CODE} || 
         LPAD(COALESCE(MAX(CAST(SUBSTRING(T.CODE, 7, 2) AS INTEGER)) + 1, 0)::text, 2, '0'), 
    8, '0') AS CODE
FROM PLMS_ISSUE_CODE T
WHERE T.CODE LIKE '${CODE}%'
  AND T.CODE_DEPTH = 3;

	
	</select>
	<insert id="insertIssueCode" parameterType="HashMap">
	 
INSERT INTO PLMS_ISSUE_CODE (
        CODE
        , CODE_DEPTH
        , CODE_NAME
        , REGISTED_YN
        , PERMITTED_YN
) VALUES (
        #{CODE}
        , #{CODE_DEPTH}::numeric
        , #{CODE_NAME}
        , #{REGISTED_YN}
        , #{PERMITTED_YN}
)
	
	</insert>
	
		<update id="updateIssueCodeName" parameterType="HashMap">
	
UPDATE PLMS_ISSUE_CODE
   SET CODE_NAME = #{CODE_NAME}
 WHERE CODE = #{CODE}
	
	</update>
	
		<!-- 이슈코드 삭제전 상태확인 -->
	<select id="checkIssueCodeStatus" parameterType="HashMap" resultType="HashMap"> 
SELECT COUNT(*) AS ISSUE_CNT
  FROM plms_POTENTIAL_ISSUE A
 WHERE ( A.CODE_DEPTH1 = #{CODE}
    OR A.CODE_DEPTH2  = #{CODE}
    OR A.CODE_DEPTH3  = #{CODE} )
   AND A.DEL_FLAG !='Y'
	</select>
	<select id="checkIssueCodeMinwonStatus" parameterType="HashMap" resultType="HashMap"> 
SELECT COUNT(*) AS MINWON_CNT
  FROM MINWON_MASTER A
 WHERE ( A.MW_CODE1 = #{CODE}
    OR A.MW_CODE2  = #{CODE}
    OR A.MW_CODE3  = #{CODE} )
   AND A.DEL_FLAG != 'Y'
</select>

<!-- 민원발생보고 전자결재 결과값 확인쿼리 -->
	<select id="selectApprovalMinwonMaster" parameterType="HashMap" resultType="HashMap"><![CDATA[ 
SELECT A.mm_mw_seq as MW_SEQ
       , A.mm_STATUS AS MINWON_STATUS
       , B.pa_status as STATUS
  FROM MINWON_MASTER   A
       , PLMS_APPROVAL       B
 WHERE A.mm_DOCKEY = B.pa_DOCKEY
   AND A.mm_STATUS = '1'
   AND A.mm_SANGSIN_YN = 'Y'
   AND B.pa_STATUS = 'C'
	]]></select>
	
	
	
<!-- 민원발생보고 전자결재 결과값 확인쿼리 -->
	<select id="selectApprovalMinwonMasterTest" parameterType="HashMap" resultType="HashMap"><![CDATA[ 
SELECT A.mm_mw_seq as MW_SEQ
       , A.mm_STATUS AS MINWON_STATUS
       , 'C' as STATUS
  FROM MINWON_MASTER   A
  --     , PLMS_APPROVAL       B
 WHERE 1=1
 --and  A.mm_DOCKEY = B.pa_DOCKEY
   AND A.mm_STATUS = '1'
   AND A.mm_SANGSIN_YN = 'Y'
   --AND B.pa_STATUS = 'C'
	]]></select>
	
	<update id="updateMinwonMasterApprovalStatus" parameterType="HashMap"><![CDATA[
UPDATE MINWON_MASTER
   SET mm_STATUS = #{STATUS}
     , mm_SANGSIN_YN = 'C'
 WHERE mm_MW_SEQ = #{MW_SEQ}
	]]></update>
	
	<update id="updateMinwonMasterApprovalStatusRejected" parameterType="HashMap"><![CDATA[
UPDATE MINWON_MASTER
   SET mm_DOCKEY = ''
     , mm_SANGSIN_YN = 'N'
 WHERE mm_MW_SEQ = #{MW_SEQ}
	]]></update>
	
	
	<!-- 민원 대응방안수립 젼자결재 결과값 확인쿼리 -->
	<select id="selectApprovalMinwonHandlingTmp" parameterType="HashMap" resultType="HashMap"><![CDATA[ 
SELECT 
    A.mht_mw_seq as MW_SEQ,
    A.mht_mw_code1 as MW_CODE1,
    A.mht_mw_code2 as MW_CODE2,
    A.mht_mw_code3 as MW_CODE3,
    A.mht_COMPLETE_YN AS MINWON_STATUS,
    B.pa_status as STATUS
FROM 
    MINWON_HANDLING_TMP A
INNER JOIN 
    PLMS_APPROVAL B ON A.mht_DOCKEY = B.pa_DOCKEY
WHERE 
    A.mht_COMPLETE_YN <> 'Y'
    AND B.pa_STATUS = 'C'
	]]></select>
	
	
	<!-- 민원관리 대응방안 적용 -->
	<update id="updateMinwonHandling" parameterType="HashMap"><![CDATA[
UPDATE MINWON_MASTER
   SET mm_MW_CODE1 = #{MW_CODE1}
     , mm_MW_CODE2 = #{MW_CODE2}
     , mm_MW_CODE3 = #{MW_CODE3}
     , mm_STATUS = #{STATUS}
 WHERE mm_MW_SEQ = ${MW_SEQ}
	]]></update>
	
	<update id="updateMinwonHandlingTmp" parameterType="HashMap">
    <![CDATA[
    UPDATE MINWON_HANDLING_TMP
    SET
    ]]>
    <if test="MW_CODE1 != null and MW_CODE1 != ''">
        mht_MW_CODE1 = #{MW_CODE1},
        mht_MW_CODE1_NAME = #{MW_CODE1_NAME},
    </if>
    <if test="MW_CODE2 != null and MW_CODE2 != ''">
        mht_MW_CODE2 = #{MW_CODE2},
        mht_MW_CODE2_NAME = #{MW_CODE2_NAME},
    </if>
    <if test="MW_CODE3 != null and MW_CODE3 != ''">
        mht_MW_CODE3 = #{MW_CODE3},
        mht_MW_CODE3_NAME = #{MW_CODE3_NAME},
    </if>
    <![CDATA[
        mht_COMPLETE_YN = #{COMPLETE_YN}

    WHERE mht_MW_SEQ = ${MW_SEQ}

    ]]>
</update>
	<!-- <update id="updateMinwonHandlingTmp" parameterType="HashMap">
UPDATE MINWON_HANDLING_TMP
   SET
		<if test="@org.apache.commons.lang3.ObjectUtils@isNotEmpty(MW_CODE1)" >
       mht_MW_CODE1 = #{MW_CODE1},
		</if>
		<if test="@org.apache.commons.lang3.ObjectUtils@isNotEmpty(MW_CODE2)" >
       mht_MW_CODE2 = #{MW_CODE2},
		</if>
		<if test="@org.apache.commons.lang3.ObjectUtils@isNotEmpty(MW_CODE3)" >
       mht_MW_CODE3 = #{MW_CODE3},
		</if>
       mht_complete_yn = #{COMPLETE_YN}
 WHERE mht_MW_SEQ = ${MW_SEQ}
	</update> -->

	 <!-- 대응방안 임시저장내용 완료처리 -->
	<update id="updateMinwonHandlingTmpComplete" parameterType="HashMap"><![CDATA[
UPDATE MINWON_HANDLING_TMP
   SET mht_COMPLETE_YN = 'Y'
 WHERE mht_MW_SEQ = #{MW_SEQ}
	]]></update>



	<select id="selectApprovalMinwonHandlingTmpRejected" parameterType="HashMap" resultType="HashMap"><![CDATA[ 
		SELECT A.mht_mw_seq as MW_SEQ
		       , A.mht_mw_code1 as MW_CODE1
		       , A.mht_mw_code2 as MW_CODE2
		       , A.mht_mw_code3 as MW_CODE3
		       , A.mht_COMPLETE_YN AS MINWON_STATUS
		       , B.pa_status as STATUS
		  FROM MINWON_HANDLING_TMP   A
		       , PLMS_APPROVAL       B
		 WHERE A.mht_DOCKEY = B.pa_DOCKEY
		   AND A.mht_COMPLETE_YN <> 'Y'
		   AND B.pa_STATUS = 'X'
	]]></select>
	
	
	<update id="updateMinwonHandlingTmpEchoNoRejected" parameterType="HashMap"><![CDATA[
UPDATE MINWON_HANDLING_TMP
   SET mht_DOCKEY = ''
 WHERE mht_MW_SEQ = #{MW_SEQ}
	]]></update>
	
	
	<!-- 민원 협의 전자결재 결과값 확인쿼리 -->
	<select id="selectApprovalMinwonAgreement" parameterType="HashMap" resultType="HashMap"><![CDATA[ 
SELECT A.ma_MW_SEQ
       , A.ma_AGREE_SEQ
       , B.pa_STATUS
  FROM MINWON_AGREEMENT   A
       left join PLMS_APPROVAL B ON A.DOCKEY = B.DOCKEY
 WHERE 1=1
   AND B.pa_STATUS = 'C'
	]]></select>
	
	
	<!-- 민원협의 전자결재 반려 확인쿼리 -->
	<select id="selectApprovalMinwonAgreementRejected" parameterType="HashMap" resultType="HashMap"><![CDATA[ 
SELECT A.ma_mw_seq as MW_SEQ
       , A.ma_agree_seq as AGREE_SEQ
       , B.pa_status as STATUS
  FROM MINWON_AGREEMENT   A
       , PLMS_APPROVAL          B
 WHERE A.ma_DOCKEY = B.pa_DOCKEY
   AND B.pa_STATUS = 'X'
	]]></select>
	
	<!-- 민원협의 전자결재 상신취소 -->
	<update id="updateMinwonAgreeApprovalCancel" parameterType="HashMap"><![CDATA[
UPDATE MINWON_AGREEMENT
   SET ma_DOCKEY = ''
 WHERE ma_MW_SEQ = #{MW_SEQ}
   AND ma_AGREE_SEQ = #{AGREE_SEQ}
	]]></update>
	
	
		<!-- 민원 완료 전자결재 결과값 확인쿼리 -->
	<select id="selectApprovalMinwonComplete" parameterType="HashMap" resultType="HashMap"><![CDATA[ 
SELECT A.mm_mw_seq as MW_SEQ
       , A.mm_STATUS AS MINWON_STATUS
       , B.pa_status as STATUS
  FROM MINWON_MASTER   A
       left join PLMS_APPROVAL B on A.mm_COMPLE_DOCKEY = B.pa_DOCKEY
 WHERE 1=1
   AND A.mm_STATUS = '4'
   AND B.pa_STATUS = 'C'
	]]></select>
	
	<!-- 민원 완료 정보업데이트 처리 -->
	<update id="updateMinwonMasterApprovalComplete" parameterType="HashMap"><![CDATA[
UPDATE MINWON_MASTER
   SET mm_STATUS = '5'
     , mm_COMPLE_YN = 'Y'
     , mm_COMPLE_DATE = CURRENT_DATE
 WHERE mm_MW_SEQ = #{MW_SEQ}
	]]></update>
	
	
	<!-- 민원 완료 전자결재 결과값 확인쿼리 -->
	<select id="selectApprovalMinwonCompletePnu" parameterType="HashMap" resultType="HashMap"><![CDATA[ 
SELECT A.mm_mw_seq as MW_SEQ
     , A.mm_STATUS AS MINWON_STATUS
     , B.pa_status as STATUS
     , C.mp_pnu as PNU
     , C.mp_addrcode as ADDRCODE
     , C.mp_jibun as JIBUN
     , JM.JISANG_NO
  FROM MINWON_MASTER A
     , PLMS_APPROVAL B
     , MINWON_PNU C
     , JIJUK_2024 JM
 WHERE A.mm_COMPLE_DOCKEY = B.pa_DOCKEY
   AND A.mm_MW_SEQ = C.mp_MINWON_SEQ
   AND C.mp_PNU = JM.PNU
   AND A.mm_MW_SEQ = #{MW_SEQ}
	]]></select>
	
	<update id="updatePnuIssue2" parameterType="HashMap">
	<![CDATA[ 
UPDATE PLMS_POTENTIAL_ISSUE
   SET CODE_DEPTH1 = #{CODE_DEPTH1}
     , CODE_DEPTH2 = #{CODE_DEPTH2}
     , CODE_DEPTH3 = #{CODE_DEPTH3}
     , ISSUE_COMMENT = #{ISSUE_COMMENT}
     , REGISTED_YN = #{REGISTED_YN}
     , PERMITTED_YN = #{PERMITTED_YN}
 WHERE ( PNU = #{PNU}
    OR (PNU = '99999'
       AND ADDRCODE = #{ADDRCODE}
       AND JIBUN = #{JIBUN}) )
	]]>
	</update>
	
	<!-- 민원 완료 전자결재 반려 결과값 확인쿼리 -->
	
	<select id="selectApprovalMinwonCompleteRejected" parameterType="HashMap" resultType="HashMap"><![CDATA[ 
SELECT A.mm_mw_seq as MW_SEQ
       , A.mm_STATUS AS MINWON_STATUS
       , B.pa_status as STATUS
  FROM MINWON_MASTER   A
       , PLMS_APPROVAL       B
 WHERE A.mm_COMPLE_DOCKEY = B.pa_DOCKEY
   AND A.mm_STATUS = '4'
   AND B.pa_STATUS = 'X'
	]]></select>
	
	
	<!-- 민원완료 전자결재 상신취소 -->
	<update id="updateMinwonMasterApprovalCompleteCancel" parameterType="HashMap"><![CDATA[
UPDATE MINWON_MASTER
   SET mm_COMPLE_DOCKEY = ''
 WHERE mm_MW_SEQ = #{MW_SEQ}
	]]></update>
	
	
<!-- 신규 민원 첨부파일 저장-->
<insert id="insertMinwonAtchFileInfo" parameterType="HashMap"><![CDATA[
INSERT INTO MINWON_ATCFILE (
	ma_mw_seq
	, ma_file_nm
	, ma_file_path
	, ma_seq
	, ma_file_seq
) VALUES (
	#{MW_SEQ}
	, #{FILE_NAME}
	, #{FILE_PATH}
	, #{FILE_MINWON_SEQ}
	, #{FILE_MINWON_SEQ}
)

]]></insert>
	
<!-- 신규 민원협의 내용 첨부파일 저장 -->
<select id="insertMinwonAgreeAtchFileInfo" parameterType="HashMap"><![CDATA[
INSERT INTO MINWON_AGREE_ATCFILE (
	maa_mw_seq
	, maa_agree_seq
	, maa_file_nm
	, maa_file_path
	, maa_seq
	, maa_file_seq
) VALUES (
	#{MAA_MW_SEQ}::numeric
	, #{MAA_AGREE_SEQ}
	, #{FILE_NAME}
	, #{FILE_PATH}
	, #{FILE_MINWON_SEQ}
	, #{FILE_MINWON_SEQ}
)
]]>
</select>

<select id="selectMinwonAgreeAtcFileListByMwSeqAndAgreeSeq" parameterType="hashmap" resultType="hashmap">
    SELECT 
    		MAA_IDX,
        MAA_FILE_PATH,
        MAA_FILE_NM,
        MAA_MW_SEQ,
        MAA_AGREE_SEQ,
        MAA_FILE_REGDATE
    FROM 
        minwon_agree_atcfile
    WHERE 
        MAA_MW_SEQ = #{mwSeq}::numeric
        AND MAA_AGREE_SEQ = #{agreeSeq}::numeric
    ORDER BY 
        MAA_FILE_REGDATE DESC
</select>

<!-- 민원 대응방안 접수/수정 시 minwon_master 테이블에도 이슈코드 갱신 -->
<update id="updateMinwonMasterIssueCodes" parameterType="HashMap">
UPDATE MINWON_MASTER
    SET MM_MW_CODE1 = #{MW_CODE1}
        , MM_MW_CODE2 = #{MW_CODE2}
        , MM_MW_CODE3 = #{MW_CODE3}
 WHERE MM_MW_SEQ = #{MW_SEQ}::numeric
</update>


</mapper>